#define AES128 1

struct AES_ctx ctx;

/* void en_str(struct AES_ctx* ctx, const char* key, const char* iv, const char* data, char** output)
{
	size_t len = strlen(data);
	
	uint8_t* str = (uint8_t*)malloc((len + 1)* sizeof(uint8_t));
	strcpy(str,data);
	
	AES_init_ctx_iv(ctx, (const uint8_t*)key, (const uint8_t*)iv);
	AES_CBC_encrypt_buffer(ctx, str, len);
	
	*output = (char*)malloc(((len * 2) + 1)* sizeof(char));
	char* ptr = &(*output[0]);
	for (int i = 0; i < len; ++i) {
		 ptr += sprintf(ptr, "%02X", str[i]);
	}
	
	free(str);
}

void de_str(struct AES_ctx* ctx, const char* key, const char* iv, const char* data, char** output)
{
	size_t len = strlen(data)/2;
	
	uint8_t* str = (uint8_t*)malloc((len + 1)* sizeof(uint8_t));
	size_t i;
    int value;
    for (i = 0; i < len && sscanf(data + i * 2, "%2x", &value) == 1; i++) {
        str[i] = value;
    }
	
	AES_init_ctx_iv(ctx, (const uint8_t*)key, (const uint8_t*)iv);
	AES_CBC_decrypt_buffer(ctx, str, len);
	
	*output = (char*)malloc((len + 1)* sizeof(char));
	strcpy(*output,str);
	
	free(str);
} */